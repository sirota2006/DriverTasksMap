{"ast":null,"code":"// export const fetchDrivers = () => async (dispatch: ThunkAction<any, any, any, AnyAction>) => {\n//     const { data } = await Axios.get(DRIVERS_API);\n//     console.log(data);\n//     dispatch({\n//         type: FETCH_DRIVERS,\n//         payload: data\n//     })\n//\n// };\nexport const fetchDrviers = () => {\n  return async dispatch => {\n    const gettingPeopleAction = {\n      type: 'GettingPeople'\n    };\n    dispatch(gettingPeopleAction);\n    const people = await getPeopleFromApi();\n    const gotPeopleAction = {\n      people,\n      type: 'GotPeople'\n    };\n    return dispatch(gotPeopleAction);\n  };\n};","map":{"version":3,"sources":["/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/store/drivers/actions.ts"],"names":["fetchDrviers","dispatch","gettingPeopleAction","type","people","getPeopleFromApi","gotPeopleAction"],"mappings":"AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,OAAO,MAAMA,YAOR,GAAG,MAAM;AACV,SAAO,MAAOC,QAAP,IAA8B;AACjC,UAAMC,mBAAyC,GAAG;AAC9CC,MAAAA,IAAI,EAAE;AADwC,KAAlD;AAGAF,IAAAA,QAAQ,CAACC,mBAAD,CAAR;AACA,UAAME,MAAM,GAAG,MAAMC,gBAAgB,EAArC;AACA,UAAMC,eAAiC,GAAG;AACtCF,MAAAA,MADsC;AAEtCD,MAAAA,IAAI,EAAE;AAFgC,KAA1C;AAIA,WAAOF,QAAQ,CAACK,eAAD,CAAf;AACH,GAXD;AAYH,CApBM","sourcesContent":["import {DRIVERS_API} from \"../../shared/contants/apis\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {Action, AnyAction, ActionCreator} from \"redux\";\nimport {DriversState, FETCH_DRIVERS} from \"./types\";\nimport Axios from \"axios\";\nimport {IDriver} from \"../../shared/interfaces/IDriver\";\n\n\n\n// export const fetchDrivers = () => async (dispatch: ThunkAction<any, any, any, AnyAction>) => {\n//     const { data } = await Axios.get(DRIVERS_API);\n//     console.log(data);\n//     dispatch({\n//         type: FETCH_DRIVERS,\n//         payload: data\n//     })\n//\n// };\n\n\n\nexport const fetchDrviers: ActionCreator<\n    ThunkAction<\n        Promise<any>,  // The type of the last action to be dispatched - will always be promise<T> for async actions\n        IDriver[],                  // The type for the data within the last action\n        null,                       // The type of the parameter for the nested function\n        IGotPeopleAction            // The type of the last action to be dispatched\n        >\n    > = () => {\n    return async (dispatch: Dispatch) => {\n        const gettingPeopleAction: IGettingPeopleAction = {\n            type: 'GettingPeople',\n        };\n        dispatch(gettingPeopleAction);\n        const people = await getPeopleFromApi();\n        const gotPeopleAction: IGotPeopleAction = {\n            people,\n            type: 'GotPeople',\n        };\n        return dispatch(gotPeopleAction);\n    };\n};\n"]},"metadata":{},"sourceType":"module"}