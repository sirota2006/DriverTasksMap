{"ast":null,"code":"var _jsxFileName = \"/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/components/tasksList/task/driverSelect/driverSelect.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport './driverSelect.scss';\nimport { filterBy } from \"../../../../shared/utils/utils\";\nimport { assignTaskAction } from '../../../../store/drivers/actions';\n\nclass DriverSelect extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAssignTask = driver => {\n      this.toggleModal();\n      this.props.assignTaskAction(this.props.taskToAssign, driver._id);\n      this.setState(state => {\n        {\n          assignedDriver: driver.name;\n        }\n      });\n    };\n\n    this.showDriversModal = () => {\n      if (this.state && this.state.openModal) {\n        return React.createElement(\"div\", {\n          className: \"driver-select_btn_modal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"driver-select_btn_modal_wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          onClick: () => this.toggleModal(),\n          className: \"driver-select_btn_modal_wrapper__close\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }, \"\\xD7\"), filterBy(this.props.drivers, 'name', this.props.filterBy).map(driver => {\n          return React.createElement(\"div\", {\n            key: driver._id,\n            onClick: () => this.onAssignTask(driver),\n            className: driver.task && driver.task._id === this.props.taskToAssign._id ? \"driver-select_btn_modal_wrapper_driver assigned\" : \"driver-select_btn_modal_wrapper_driver\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"driver-select_btn_modal_wrapper_driver__name\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 50\n            },\n            __self: this\n          }, driver.name));\n        })));\n      }\n    };\n\n    this.toggleModal = () => {\n      this.setState({\n        openModal: !this.state.openModal\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      openModal: false,\n      assignedDriver: ''\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"driver-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: this.toggleModal,\n      className: \"driver-select_btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"driver-select_btn__selected--active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Select Driver\"), this.showDriversModal()));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps, {\n  assignTaskAction\n})(DriverSelect);","map":{"version":3,"sources":["/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/components/tasksList/task/driverSelect/driverSelect.tsx"],"names":["React","connect","filterBy","assignTaskAction","DriverSelect","Component","onAssignTask","driver","toggleModal","props","taskToAssign","_id","setState","state","assignedDriver","name","showDriversModal","openModal","drivers","map","task","componentDidMount","render","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAGA,OAAO,qBAAP;AACA,SAAQC,QAAR,QAAuB,gCAAvB;AACA,SAAQC,gBAAR,QAA+B,mCAA/B;;AAiBA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAAgG;AAAA;AAAA;;AAAA,SAQ5FC,YAR4F,GAQ5EC,MAAD,IAAqB;AAChC,WAAKC,WAAL;AACA,WAAKC,KAAL,CAAWN,gBAAX,CAA4B,KAAKM,KAAL,CAAWC,YAAvC,EAAqDH,MAAM,CAACI,GAA5D;AACA,WAAKC,QAAL,CAAcC,KAAK,IAAI;AACnB;AAACC,UAAAA,cAAc,EAAEP,MAAM,CAACQ,IAAP;AAAY;AAChC,OAFD;AAGH,KAd2F;;AAAA,SAiB5FC,gBAjB4F,GAiBzE,MAAM;AACrB,UAAG,KAAKH,KAAL,IAAc,KAAKA,KAAL,CAAWI,SAA5B,EAAuC;AACnC,eACI;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACQ;AAAK,UAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACI;AAAM,UAAA,OAAO,EAAE,MAAM,KAAKT,WAAL,EAArB;AAAyC,UAAA,SAAS,EAAC,wCAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKN,QAAQ,CAAC,KAAKO,KAAL,CAAWS,OAAZ,EAAqB,MAArB,EAA6B,KAAKT,KAAL,CAAWP,QAAxC,CAAR,CAA0DiB,GAA1D,CAA8DZ,MAAM,IAAI;AACrE,iBACI;AAAK,YAAA,GAAG,EAAEA,MAAM,CAACI,GAAjB;AAAsB,YAAA,OAAO,EAAE,MAAM,KAAKL,YAAL,CAAkBC,MAAlB,CAArC;AAAgE,YAAA,SAAS,EAAEA,MAAM,CAACa,IAAP,IAAeb,MAAM,CAACa,IAAP,CAAYT,GAAZ,KAAoB,KAAKF,KAAL,CAAWC,YAAX,CAAwBC,GAA3D,GAAiE,iDAAjE,GAAsH,wCAAjM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAM,YAAA,SAAS,EAAC,8CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKJ,MAAM,CAACQ,IADZ,CADJ,CADJ;AAOH,SARA,CAFL,CADR,CADJ;AAgBH;AACJ,KApC2F;;AAAA,SAsC5FP,WAtC4F,GAsC9E,MAAM;AAChB,WAAKI,QAAL,CAAc;AACVK,QAAAA,SAAS,EAAE,CAAC,KAAKJ,KAAL,CAAWI;AADb,OAAd;AAGH,KA1C2F;AAAA;;AAC5FI,EAAAA,iBAAiB,GAAS;AACtB,SAAKT,QAAL,CAAc;AACVK,MAAAA,SAAS,EAAE,KADD;AAEVH,MAAAA,cAAc,EAAE;AAFN,KAAd;AAIH;;AAsCDQ,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,OAAO,EAAE,KAAKd,WAAnB;AAAgC,MAAA,SAAS,EAAC,mBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,qCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAIM,KAAKQ,gBAAL,EAJN,CADJ,CADJ;AAUH;;AAvD2F;;AA0DhG,MAAMO,eAAe,GAAIV,KAAD,IAAmC;AACvD,SAAOA,KAAP;AACH,CAFD;;AAIA,eAAeZ,OAAO,CAACsB,eAAD,EAAkB;AAAEpB,EAAAA;AAAF,CAAlB,CAAP,CAA+CC,YAA/C,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {IDriver} from \"../../../../shared/interfaces/IDriver\";\nimport {ITask} from \"../../../../shared/interfaces/ITask\";\nimport './driverSelect.scss'\nimport {filterBy} from \"../../../../shared/utils/utils\";\nimport {assignTaskAction} from '../../../../store/drivers/actions';\n\ninterface OwnProps {\n    taskToAssign: ITask;\n}\n\ninterface StateProps {\n    drivers: Array<IDriver>;\n    filterBy: string\n}\n\ninterface DispatchProps {\n    assignTaskAction: typeof assignTaskAction;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass DriverSelect extends React.Component<Props, {openModal: boolean, assignedDriver: string}> {\n    componentDidMount(): void {\n        this.setState({\n            openModal: false,\n            assignedDriver: ''\n        })\n    }\n\n    onAssignTask = (driver: IDriver) => {\n        this.toggleModal();\n        this.props.assignTaskAction(this.props.taskToAssign, driver._id);\n        this.setState(state => {\n            {assignedDriver: driver.name}\n        })\n    };\n\n\n    showDriversModal = () => {\n        if(this.state && this.state.openModal) {\n            return (\n                <div className=\"driver-select_btn_modal\">\n                        <div className=\"driver-select_btn_modal_wrapper\">\n                            <span onClick={() => this.toggleModal()} className=\"driver-select_btn_modal_wrapper__close\">&times;</span>\n                            {filterBy(this.props.drivers, 'name', this.props.filterBy).map(driver => {\n                                return (\n                                    <div key={driver._id} onClick={() => this.onAssignTask(driver)} className={driver.task && driver.task._id === this.props.taskToAssign._id ? \"driver-select_btn_modal_wrapper_driver assigned\" :  \"driver-select_btn_modal_wrapper_driver\"}>\n                                        <span className=\"driver-select_btn_modal_wrapper_driver__name\">\n                                            {driver.name}\n                                        </span>\n                                    </div>\n                                )\n                            })}\n                    </div>\n                </div>\n            )\n        }\n    };\n\n    toggleModal = () => {\n        this.setState({\n            openModal: !this.state.openModal\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"driver-select\">\n                <div onClick={this.toggleModal} className=\"driver-select_btn\">\n                    <span className=\"driver-select_btn__selected--active\">\n                        Select Driver\n                    </span>\n                    { this.showDriversModal() }\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StateProps): StateProps => {\n    return state;\n};\n\nexport default connect(mapStateToProps, { assignTaskAction })(DriverSelect);\n"]},"metadata":{},"sourceType":"module"}