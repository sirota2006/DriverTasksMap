{"ast":null,"code":"import { FETCH_DRIVERS, REMOVE_DRIVER, ASSIGN_TASK } from \"./types\";\nexport const driversReducer = (state = [], action) => {\n  switch (action.type) {\n    case FETCH_DRIVERS:\n      return action.payload;\n\n    case REMOVE_DRIVER:\n      return state.filter(driver => driver._id !== action.payload);\n\n    case ASSIGN_TASK:\n      let newDrivers = state;\n      state.forEach((driver, index) => {\n        if (driver.task._id === action.payload.task._id) {\n          delete newDrivers[index].task;\n        }\n\n        if (driver._id === action.payload.driverId) {\n          newDrivers[index].task = action.payload.task;\n        }\n      });\n      return newDrivers;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/store/drivers/reducer.ts"],"names":["FETCH_DRIVERS","REMOVE_DRIVER","ASSIGN_TASK","driversReducer","state","action","type","payload","filter","driver","_id","newDrivers","forEach","index","task","driverId"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,aAAvB,EAAsCC,WAAtC,QAAwD,SAAxD;AAKA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAqB,GAAG,EAAzB,EAA6BC,MAA7B,KAAiE;AAC3F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,aAAL;AACI,aAAOK,MAAM,CAACE,OAAd;;AACJ,SAAKN,aAAL;AACI,aAAOG,KAAK,CAACI,MAAN,CAAaC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeL,MAAM,CAACE,OAA7C,CAAP;;AACJ,SAAKL,WAAL;AACG,UAAIS,UAA0B,GAAGP,KAAjC;AACAA,MAAAA,KAAK,CAACQ,OAAN,CAAc,CAACH,MAAD,EAASI,KAAT,KAAkB;AAC5B,YAAGJ,MAAM,CAACK,IAAP,CAAYJ,GAAZ,KAAoBL,MAAM,CAACE,OAAP,CAAeO,IAAf,CAAoBJ,GAA3C,EAAgD;AAC5C,iBAAOC,UAAU,CAACE,KAAD,CAAV,CAAkBC,IAAzB;AACH;;AAED,YAAGL,MAAM,CAACC,GAAP,KAAeL,MAAM,CAACE,OAAP,CAAeQ,QAAjC,EAA2C;AACvCJ,UAAAA,UAAU,CAACE,KAAD,CAAV,CAAkBC,IAAlB,GAAyBT,MAAM,CAACE,OAAP,CAAeO,IAAxC;AACH;AAGJ,OAVD;AAWA,aAAOH,UAAP;;AACH;AACI,aAAOP,KAAP;AApBR;AAsBH,CAvBM","sourcesContent":["import {FETCH_DRIVERS, REMOVE_DRIVER, ASSIGN_TASK} from \"./types\";\nimport { DriversActionTypes } from \"./types\";\nimport {IDriver} from \"../../shared/interfaces/IDriver\";\n\n\nexport const driversReducer = (state: Array<IDriver> = [], action: DriversActionTypes): any => {\n    switch (action.type) {\n        case FETCH_DRIVERS:\n            return action.payload;\n        case REMOVE_DRIVER:\n            return state.filter(driver => driver._id !== action.payload);\n        case ASSIGN_TASK:\n           let newDrivers: Array<IDriver> = state;\n           state.forEach((driver, index)=> {\n               if(driver.task._id === action.payload.task._id) {\n                   delete newDrivers[index].task;\n               }\n\n               if(driver._id === action.payload.driverId) {\n                   newDrivers[index].task = action.payload.task;\n               }\n\n\n           });\n           return newDrivers;\n        default:\n            return state;\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}