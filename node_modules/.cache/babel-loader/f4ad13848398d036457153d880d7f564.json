{"ast":null,"code":"import { FETCH_DRIVERS, REMOVE_DRIVER, ASSIGN_TASK } from \"./types\";\nimport { DRIVERS_API } from \"../../shared/contants/apis\";\nimport Axios from \"axios\";\nexport function fetchDrivers() {\n  return async dispatch => {\n    const _ref = await Axios.get(DRIVERS_API),\n          data = _ref.data;\n\n    dispatch({\n      type: FETCH_DRIVERS,\n      payload: data\n    });\n  };\n}\nexport function removeDriverAction(driverId) {\n  return {\n    type: REMOVE_DRIVER,\n    payload: driverId\n  };\n}\nexport function assignTaskAction(task, driverId) {\n  return {\n    type: ASSIGN_TASK,\n    payload: {\n      task,\n      driverId\n    }\n  };\n}","map":{"version":3,"sources":["/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/store/drivers/actions.ts"],"names":["FETCH_DRIVERS","REMOVE_DRIVER","ASSIGN_TASK","DRIVERS_API","Axios","fetchDrivers","dispatch","get","data","type","payload","removeDriverAction","driverId","assignTaskAction","task"],"mappings":"AACA,SAEIA,aAFJ,EAIIC,aAJJ,EAMIC,WANJ,QAOO,SAPP;AAQA,SAAQC,WAAR,QAA0B,4BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,SAASC,YAAT,GAAkF;AACrF,SAAO,MAAOC,QAAP,IAAiD;AAAA,iBACnC,MAAMF,KAAK,CAACG,GAAN,CAAUJ,WAAV,CAD6B;AAAA,UAC5CK,IAD4C,QAC5CA,IAD4C;;AAEpDF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,aADD;AAELU,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAIH,GAND;AAOH;AAED,OAAO,SAASG,kBAAT,CAA4BC,QAA5B,EAAkE;AACrE,SAAO;AACHH,IAAAA,IAAI,EAAER,aADH;AAEHS,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH;AAED,OAAO,SAASC,gBAAT,CAA0BC,IAA1B,EAAuCF,QAAvC,EAA2E;AAC9E,SAAO;AACHH,IAAAA,IAAI,EAAEP,WADH;AAEHQ,IAAAA,OAAO,EAAE;AACLI,MAAAA,IADK;AACCF,MAAAA;AADD;AAFN,GAAP;AAMH","sourcesContent":["import {Dispatch} from \"redux\";\nimport {\n    DriverFetchAction,\n    FETCH_DRIVERS,\n    RemoveDriverAction,\n    REMOVE_DRIVER,\n    AssignTaskAction,\n    ASSIGN_TASK\n} from \"./types\";\nimport {DRIVERS_API} from \"../../shared/contants/apis\";\nimport Axios from \"axios\";\nimport {ITask} from \"../../shared/interfaces/ITask\";\n\nexport function fetchDrivers(): (dispatch: Dispatch<DriverFetchAction>) => Promise<void> {\n    return async (dispatch: Dispatch<DriverFetchAction>) => {\n        const { data } = await Axios.get(DRIVERS_API);\n        dispatch({\n            type: FETCH_DRIVERS,\n            payload: data\n        })\n    }\n}\n\nexport function removeDriverAction(driverId: string): RemoveDriverAction {\n    return {\n        type: REMOVE_DRIVER,\n        payload: driverId\n    }\n}\n\nexport function assignTaskAction(task: ITask, driverId: string): AssignTaskAction {\n    return {\n        type: ASSIGN_TASK,\n        payload: {\n            task, driverId\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}