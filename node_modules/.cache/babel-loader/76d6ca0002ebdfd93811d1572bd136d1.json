{"ast":null,"code":"import { FETCH_DRIVERS, REMOVE_DRIVER, ASSIGN_TASK } from \"./types\";\nexport const driversReducer = (state = [], action) => {\n  switch (action.type) {\n    case FETCH_DRIVERS:\n      return action.payload;\n\n    case REMOVE_DRIVER:\n      return state.filter(driver => driver._id !== action.payload);\n\n    case ASSIGN_TASK:\n      const newDriver = state.map(driver => {\n        if (driver._id === action.payload.driverId) {\n          driver.task = action.payload.task;\n        }\n      });\n      return newDriver;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/store/drivers/reducer.ts"],"names":["FETCH_DRIVERS","REMOVE_DRIVER","ASSIGN_TASK","driversReducer","state","action","type","payload","filter","driver","_id","newDriver","map","driverId","task"],"mappings":"AAAA,SAAQA,aAAR,EAAuBC,aAAvB,EAAsCC,WAAtC,QAAwD,SAAxD;AAKA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAqB,GAAG,EAAzB,EAA6BC,MAA7B,KAAiE;AAC3F,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,aAAL;AACI,aAAOK,MAAM,CAACE,OAAd;;AACJ,SAAKN,aAAL;AACI,aAAOG,KAAK,CAACI,MAAN,CAAaC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeL,MAAM,CAACE,OAA7C,CAAP;;AACJ,SAAKL,WAAL;AACK,YAAMS,SAAS,GAAGP,KAAK,CAACQ,GAAN,CAAUH,MAAM,IAAI;AACnC,YAAGA,MAAM,CAACC,GAAP,KAAeL,MAAM,CAACE,OAAP,CAAeM,QAAjC,EAA2C;AACvCJ,UAAAA,MAAM,CAACK,IAAP,GAAcT,MAAM,CAACE,OAAP,CAAeO,IAA7B;AACH;AACJ,OAJkB,CAAlB;AAKD,aAAOH,SAAP;;AACJ;AACI,aAAOP,KAAP;AAbR;AAeH,CAhBM","sourcesContent":["import {FETCH_DRIVERS, REMOVE_DRIVER, ASSIGN_TASK} from \"./types\";\nimport { DriversActionTypes } from \"./types\";\nimport {IDriver} from \"../../shared/interfaces/IDriver\";\n\n\nexport const driversReducer = (state: Array<IDriver> = [], action: DriversActionTypes): any => {\n    switch (action.type) {\n        case FETCH_DRIVERS:\n            return action.payload;\n        case REMOVE_DRIVER:\n            return state.filter(driver => driver._id !== action.payload);\n        case ASSIGN_TASK:\n             const newDriver = state.map(driver => {\n                if(driver._id === action.payload.driverId) {\n                    driver.task = action.payload.task;\n                }\n            });\n            return newDriver;\n        default:\n            return state;\n    }\n};\n\n"]},"metadata":{},"sourceType":"module"}