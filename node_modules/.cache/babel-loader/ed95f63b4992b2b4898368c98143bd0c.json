{"ast":null,"code":"var _jsxFileName = \"/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/components/DriversList/index.tsx\";\nimport { connect } from 'react-redux';\nimport { fetchDrivers, removeDriverAction } from \"../../store/drivers/actions\";\nimport './driversList.scss';\nimport * as React from \"react\";\nimport Driver from \"./driver\";\nimport { setMapLocationAction } from \"../../store/map/actions\";\nimport { parseLocation } from \"../../shared/utils/utils\";\n\nclass DriversList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleLocateDriver = driverLocation => {\n      this.props.setMapLocationAction(parseLocation(driverLocation));\n    };\n\n    this.handleRemoveDriver = driverId => {\n      this.props.removeDriverAction(driverId);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchDrivers();\n  }\n\n  renderDrivers() {\n    if (this.props.drivers.length) {\n      return this.props.drivers.map(driver => {\n        return React.createElement(Driver, {\n          key: driver._id,\n          onRemoveDriver: this.handleRemoveDriver,\n          onLocateDriver: this.handleLocateDriver,\n          driver: driver,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        });\n      });\n    }\n\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"No Available Drivers!\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"drivers-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"filter name\",\n      type: \"text\",\n      className: \"drivers-list__filter-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"drivers-list_wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, this.renderDrivers()));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return state;\n}; //@ts-ignore\n\n\nexport default connect(mapStateToProps, {\n  removeDriverAction,\n  setMapLocationAction,\n  fetchDrivers\n})(DriversList);","map":{"version":3,"sources":["/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/components/DriversList/index.tsx"],"names":["connect","fetchDrivers","removeDriverAction","React","Driver","setMapLocationAction","parseLocation","DriversList","Component","handleLocateDriver","driverLocation","props","handleRemoveDriver","driverId","componentDidMount","renderDrivers","drivers","length","map","driver","_id","render","mapStateToProps","state"],"mappings":";AAAA,SAAQA,OAAR,QAAsB,aAAtB;AACA,SAAQC,YAAR,EAAsBC,kBAAtB,QAA+C,6BAA/C;AACA,OAAO,oBAAP;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,SAAQC,oBAAR,QAAmC,yBAAnC;AACA,SAAQC,aAAR,QAA4B,0BAA5B;;AAUA,MAAMC,WAAN,SAA0BJ,KAAK,CAACK,SAAhC,CAA2D;AAAA;AAAA;;AAAA,SAKvDC,kBALuD,GAKjCC,cAAD,IAA+B;AAChD,WAAKC,KAAL,CAAWN,oBAAX,CAAgCC,aAAa,CAACI,cAAD,CAA7C;AACH,KAPsD;;AAAA,SASvDE,kBATuD,GASjCC,QAAD,IAAsB;AACvC,WAAKF,KAAL,CAAWT,kBAAX,CAA8BW,QAA9B;AACH,KAXsD;AAAA;;AACvDC,EAAAA,iBAAiB,GAAS;AACtB,SAAKH,KAAL,CAAWV,YAAX;AACH;;AAUDc,EAAAA,aAAa,GAAG;AACZ,QAAI,KAAKJ,KAAL,CAAWK,OAAX,CAAmBC,MAAvB,EAA+B;AAC3B,aAAO,KAAKN,KAAL,CAAWK,OAAX,CAAmBE,GAAnB,CAAuBC,MAAM,IAAI;AACpC,eAAO,oBAAC,MAAD;AAAQ,UAAA,GAAG,EAAEA,MAAM,CAACC,GAApB;AAAyB,UAAA,cAAc,EAAE,KAAKR,kBAA9C;AAAkE,UAAA,cAAc,EAAE,KAAKH,kBAAvF;AAA2G,UAAA,MAAM,EAAEU,MAAnH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAFM,CAAP;AAGH;;AAED,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAP;AACH;;AAEDE,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,WAAW,EAAC,aAAnB;AAAiC,MAAA,IAAI,EAAC,MAAtC;AAA6C,MAAA,SAAS,EAAC,4BAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKN,aAAL,EADL,CAFJ,CADJ;AAQH;;AAhCsD;;AAmC3D,MAAMO,eAAe,GAAIC,KAAD,IAA6B;AAAE,SAAOA,KAAP;AAAc,CAArE,C,CAEA;;;AACA,eAAevB,OAAO,CAACsB,eAAD,EAAkB;AAAEpB,EAAAA,kBAAF;AAAsBG,EAAAA,oBAAtB;AAA4CJ,EAAAA;AAA5C,CAAlB,CAAP,CAAqFM,WAArF,CAAf","sourcesContent":["import {connect} from 'react-redux';\nimport {fetchDrivers, removeDriverAction} from \"../../store/drivers/actions\";\nimport './driversList.scss';\nimport * as React from \"react\";\nimport {IDriver} from \"../../shared/interfaces/IDriver\";\nimport {DriversState} from \"../../store/drivers/types\";\nimport Driver from \"./driver\";\nimport {ILocation} from \"../../shared/interfaces/ILocation\";\nimport {setMapLocationAction} from \"../../store/map/actions\";\nimport {parseLocation} from \"../../shared/utils/utils\";\n\ninterface DriverListProps {\n    fetchDrivers: typeof fetchDrivers;\n    setMapLocationAction: typeof setMapLocationAction;\n    removeDriverAction: typeof removeDriverAction;\n    drivers: Array<IDriver>;\n}\n\n\nclass DriversList extends React.Component<DriverListProps> {\n    componentDidMount(): void {\n        this.props.fetchDrivers();\n    }\n\n    handleLocateDriver = (driverLocation: ILocation) => {\n        this.props.setMapLocationAction(parseLocation(driverLocation));\n    };\n\n    handleRemoveDriver = (driverId: string) => {\n        this.props.removeDriverAction(driverId);\n    }\n\n    renderDrivers() {\n        if (this.props.drivers.length) {\n            return this.props.drivers.map(driver => {\n                return <Driver key={driver._id} onRemoveDriver={this.handleRemoveDriver} onLocateDriver={this.handleLocateDriver} driver={driver}/>\n            })\n        }\n\n        return <h1>No Available Drivers!</h1>;\n    }\n\n    render() {\n        return (\n            <div className='drivers-list'>\n                <input placeholder='filter name' type=\"text\" className=\"drivers-list__filter-input\"/>\n                <div className=\"drivers-list_wrapper\">\n                    {this.renderDrivers()}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: DriverListProps)  => { return state };\n\n//@ts-ignore\nexport default connect(mapStateToProps, { removeDriverAction, setMapLocationAction, fetchDrivers })(DriversList);\n"]},"metadata":{},"sourceType":"module"}