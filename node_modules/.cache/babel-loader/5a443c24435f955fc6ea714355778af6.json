{"ast":null,"code":"var _jsxFileName = \"/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/components/tasksList/task/driverSelect/driverSelect.tsx\";\nimport React from 'react';\nimport { connect } from \"react-redux\";\nimport './driverSelect.scss';\nimport { assignDriverAction } from \"../../../../store/tasks/actions\";\nimport { filterBy } from \"../../../../shared/utils/utils\";\n\nclass DriverSelect extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSelectDriver = driver => {\n      this.toggleModal();\n      this.props.assignDriverAction(driver, this.props.taskToAssign._id);\n    };\n\n    this.showDriversModal = () => {\n      if (this.state && this.state.openModal) {\n        return React.createElement(\"div\", {\n          className: \"driver-select_btn_modal\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"driver-select_btn_modal_wrapper\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, \"\\xD7\", filterBy(this.props.drivers, 'name', this.props.filterBy).map(driver => {\n          return React.createElement(\"div\", {\n            key: driver._id,\n            onClick: () => this.onSelectDriver(driver),\n            className: this.props.taskToAssign.assignTo && this.props.taskToAssign.assignTo.name === driver.name ? \"driver-select_btn_modal_wrapper_driver assigned\" : \"driver-select_btn_modal_wrapper_driver\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 45\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"driver-select_btn_modal_wrapper_driver__name\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          }, driver.name));\n        })));\n      }\n    };\n\n    this.toggleModal = () => {\n      this.setState({\n        openModal: !this.state.openModal\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      openModal: false\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"driver-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: this.toggleModal,\n      className: this.props.taskToAssign.assignTo ? \"driver-select_btn active\" : \"driver-select_btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"driver-select_btn__selected--active\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, this.props.taskToAssign.assignTo ? this.props.taskToAssign.assignTo.name : 'Select Driver'), this.showDriversModal()));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return state;\n};\n\nexport default connect(mapStateToProps, {\n  assignDriverAction\n})(DriverSelect);","map":{"version":3,"sources":["/Users/artiom2006/Desktop/Web/React/bringg/bringg-map/src/components/tasksList/task/driverSelect/driverSelect.tsx"],"names":["React","connect","assignDriverAction","filterBy","DriverSelect","Component","onSelectDriver","driver","toggleModal","props","taskToAssign","_id","showDriversModal","state","openModal","drivers","map","assignTo","name","setState","componentDidMount","render","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAGA,OAAO,qBAAP;AACA,SAAQC,kBAAR,QAAiC,iCAAjC;AACA,SAAQC,QAAR,QAAuB,gCAAvB;;AAiBA,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAAwE;AAAA;AAAA;;AAAA,SAOpEC,cAPoE,GAOlDC,MAAD,IAAqB;AAClC,WAAKC,WAAL;AACA,WAAKC,KAAL,CAAWP,kBAAX,CAA8BK,MAA9B,EAAsC,KAAKE,KAAL,CAAWC,YAAX,CAAwBC,GAA9D;AACH,KAVmE;;AAAA,SAapEC,gBAboE,GAajD,MAAM;AACrB,UAAG,KAAKC,KAAL,IAAc,KAAKA,KAAL,CAAWC,SAA5B,EAAuC;AACnC,eACI;AAAK,UAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACQ;AAAK,UAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEKX,QAAQ,CAAC,KAAKM,KAAL,CAAWM,OAAZ,EAAqB,MAArB,EAA6B,KAAKN,KAAL,CAAWN,QAAxC,CAAR,CAA0Da,GAA1D,CAA8DT,MAAM,IAAI;AACrE,iBACI;AAAK,YAAA,GAAG,EAAEA,MAAM,CAACI,GAAjB;AAAsB,YAAA,OAAO,EAAE,MAAM,KAAKL,cAAL,CAAoBC,MAApB,CAArC;AAAkE,YAAA,SAAS,EAAE,KAAKE,KAAL,CAAWC,YAAX,CAAwBO,QAAxB,IAAoC,KAAKR,KAAL,CAAWC,YAAX,CAAwBO,QAAxB,CAAiCC,IAAjC,KAA0CX,MAAM,CAACW,IAArF,GAA4F,iDAA5F,GAAgJ,wCAA7N;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAM,YAAA,SAAS,EAAC,8CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACKX,MAAM,CAACW,IADZ,CADJ,CADJ;AAOH,SARA,CAFL,CADR,CADJ;AAgBH;AACJ,KAhCmE;;AAAA,SAkCpEV,WAlCoE,GAkCtD,MAAM;AAChB,WAAKW,QAAL,CAAc;AACVL,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADb,OAAd;AAGH,KAtCmE;AAAA;;AACpEM,EAAAA,iBAAiB,GAAS;AACtB,SAAKD,QAAL,CAAc;AACVL,MAAAA,SAAS,EAAE;AADD,KAAd;AAGH;;AAmCDO,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,OAAO,EAAE,KAAKb,WAAnB;AAAgC,MAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwBO,QAAxB,GAAmC,0BAAnC,GAA+D,mBAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,qCAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKR,KAAL,CAAWC,YAAX,CAAwBO,QAAxB,GAAmC,KAAKR,KAAL,CAAWC,YAAX,CAAwBO,QAAxB,CAAiCC,IAApE,GAA2E,eADhF,CADJ,EAIM,KAAKN,gBAAL,EAJN,CADJ,CADJ;AAUH;;AAnDmE;;AAsDxE,MAAMU,eAAe,GAAIT,KAAD,IAAmC;AACvD,SAAOA,KAAP;AACH,CAFD;;AAIA,eAAeZ,OAAO,CAACqB,eAAD,EAAkB;AAAEpB,EAAAA;AAAF,CAAlB,CAAP,CAAiDE,YAAjD,CAAf","sourcesContent":["import React from 'react';\nimport {connect} from \"react-redux\";\nimport {IDriver} from \"../../../../shared/interfaces/IDriver\";\nimport {ITask} from \"../../../../shared/interfaces/ITask\";\nimport './driverSelect.scss'\nimport {assignDriverAction} from \"../../../../store/tasks/actions\";\nimport {filterBy} from \"../../../../shared/utils/utils\";\n\ninterface OwnProps {\n    taskToAssign: ITask;\n}\n\ninterface StateProps {\n    drivers: Array<IDriver>;\n    filterBy: string\n}\n\ninterface DispatchProps {\n    assignDriverAction: typeof assignDriverAction;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass DriverSelect extends React.Component<Props, {openModal: boolean}> {\n    componentDidMount(): void {\n        this.setState({\n            openModal: false\n        })\n    }\n\n    onSelectDriver = (driver: IDriver) => {\n        this.toggleModal();\n        this.props.assignDriverAction(driver, this.props.taskToAssign._id);\n    };\n\n\n    showDriversModal = () => {\n        if(this.state && this.state.openModal) {\n            return (\n                <div className=\"driver-select_btn_modal\">\n                        <div className=\"driver-select_btn_modal_wrapper\">\n                            &times;\n                            {filterBy(this.props.drivers, 'name', this.props.filterBy).map(driver => {\n                                return (\n                                    <div key={driver._id} onClick={() => this.onSelectDriver(driver)} className={this.props.taskToAssign.assignTo && this.props.taskToAssign.assignTo.name === driver.name ? \"driver-select_btn_modal_wrapper_driver assigned\" : \"driver-select_btn_modal_wrapper_driver\"}>\n                                        <span className=\"driver-select_btn_modal_wrapper_driver__name\">\n                                            {driver.name}\n                                        </span>\n                                    </div>\n                                )\n                            })}\n                    </div>\n                </div>\n            )\n        }\n    };\n\n    toggleModal = () => {\n        this.setState({\n            openModal: !this.state.openModal\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"driver-select\">\n                <div onClick={this.toggleModal} className={this.props.taskToAssign.assignTo ? \"driver-select_btn active\": \"driver-select_btn\"}>\n                    <span className=\"driver-select_btn__selected--active\">\n                        {this.props.taskToAssign.assignTo ? this.props.taskToAssign.assignTo.name : 'Select Driver'}\n                    </span>\n                    { this.showDriversModal() }\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: StateProps): StateProps => {\n    return state;\n};\n\nexport default connect(mapStateToProps, { assignDriverAction })(DriverSelect);\n"]},"metadata":{},"sourceType":"module"}